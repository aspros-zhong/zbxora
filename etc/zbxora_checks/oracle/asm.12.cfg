# vim: syntax=sql
[auto_discovery_60]
minutes: 60
dgrp.lld: select name "{#DGRP}" from v$asm_diskgroup
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)
acfs.lld: select distinct volume_name "{#ASMVOL}" from v$asm_volume
parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from v$instance

[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance

[checks_05m]
minutes: 5
dgrp.used: select 'dgrp['||name||',filesize]' key, total_mb value from v$asm_diskgroup
   union all
   select 'dgrp['||name||',usedbytes]' key, total_mb - USABLE_FILE_MB value from v$asm_diskgroup
   union all
   select 'dgrp['||name||',pctfree]' key, ( (case when USABLE_FILE_MB < 0 then 0 else USABLE_FILE_MB end) /total_mb)*100 value from v$asm_diskgroup
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
acfs: select 'acfs['||volume_name||','||
          case when k = 1 then 'total_mb]'
               when k = 2 then 'used_mb]'
               when k = 3 then 'pct_free]'
          end key
       ,  case when k = 1 then to_char(round(total_mb))
               when k = 2 then to_char(round(total_mb - free_mb))
               -- when k = 3 then to_char(round(free_mb/total_mb*100))
               when k = 3 then to_char((free_mb/total_mb*100))
          end val
        from (
                SELECT v.volume_name, sum(acfs.total_mb) total_mb, sum(acfs.free_mb) free_mb
                FROM V$ASM_DISKGROUP dg
                , V$ASM_VOLUME v
                , V$ASM_ACFSVOLUMES acfs
                WHERE dg.group_number = v.group_number
                and v.volume_device = acfs.vol_device
                group by v.volume_name
        )
        cross JOIN   ( SELECT LEVEL k FROM dual CONNECT BY LEVEL <= 3 ) k
[checks_60m]
minutes: 60
alertlog: select 'inst['||i.instance_name||',log]', d.value||'/alert_'||i.instance_name||'.log' from gv$instance i, gv$diag_info d
           where i.inst_id = d.inst_id and d.name = 'Diag Trace'
